
#  This project aims to automate the installation of WordPress and its dependencies (PHP, Apache, MySQL) using a configuration management tool. The goal is to streamline the setup process, reduce manual effort, and 
#  ensure consistency across deployments. This will enhance efficiency and reliability for all new WordPress projects at XYZ Ltd.


# Installation or pre-requisites (steps to install)
- Create AWS account

- Setup Ansible

### Ansible is needed in this project to automate and standardize the installation and configuration of WordPress and its dependencies 

`sudo apt-get install software-properties-common`

`sudo apt-add-repository ppa:ansible/ansible`

`sudo apt-get update`

`sudo apt-get install -y ansible

- Verify ansible installation
  
`ansible --version`

- Setup Terraform

### Terraform automates the creation of resources such as EC2 instances, VPCs, security groups, and more, ensuring a consistent and efficient setup for Wordpress

- Installation steps
`wget https://releases.hashicorp.com/terraform/1.8.1/terraform_1.8.1_linux_amd64.zip`
`unzip terraform_1.8.1_linux_amd64.zip`
`sudo mv terraform /usr/local/bin`
`sudo cp /usr/local/bin/terraform /bin/terraform`

- Verify terraform installation

`terraform -version`

- Setup Git

### Git is needed in this project to manage and version control the codebase, including Terraform scripts and Ansible playbooks. 

- Installation steps

`sudo apt install -y git`

- Verify git installation

`git --version`


# Create AWS Key pair
- Create a key pair on AWS

- Download the keypair & add it to the machine/lab

- Change the permission of the pem file

# Create/Download the Ansible playbook/roles to setup wordpress server

# Create the Terraform configuration file - to create Ubuntu server on AWS - automate the Wordpress setup inside this server
- Find the VPC ID & AMI -> aws rss configuration

- Create the configuration file (.tf)

- locals - local variables

- provider - aws - access_key, secret_key, token & region

- resource - aws_security_group - ingress & egress rules

- resource - aws_instance - ami, instance_type, vpc_security_group_ids, key_name, tags

- provisioner - remote-exec - connection - check the SSH connectivity - using the public_ip

- provisioner - local-exec - create dynamic inventory file - add the public_ip of instance created to the inventory file

- provisioner - local-exec - invoke the ansible-playbook (setup wordpress) - with custom inventory -i - with the instance user -u, private_key

- output - print the public ip of newly created instance - browse this to get the WP page
